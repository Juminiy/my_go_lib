INTTK int
IDENFR g_list
LBRACK [
INTCON 20
RBRACK ]
SEMICN ;
INTTK int
IDENFR abs
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
MINU -
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR times
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR a
MULT *
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR sum4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
COMMA ,
INTTK int
IDENFR d
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
PLUS +
IDENFR d
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
INTTK int
IDENFR theSum
COMMA ,
IDENFR i
SEMICN ;
CHARTK char
IDENFR f
SEMICN ;
SCANTK scanf
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
SCANTK scanf
LPARENT (
IDENFR f
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR sum4
LPARENT (
IDENFR abs
LPARENT (
IDENFR times
LPARENT (
INTCON 2
COMMA ,
MINU -
INTCON 2
RPARENT )
RPARENT )
COMMA ,
IDENFR abs
LPARENT (
MINU -
INTCON 1
RPARENT )
COMMA ,
IDENFR abs
LPARENT (
MINU -
INTCON 3
RPARENT )
COMMA ,
IDENFR abs
LPARENT (
INTCON 2
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
IDENFR sum4
LPARENT (
IDENFR abs
LPARENT (
IDENFR times
LPARENT (
INTCON 2
COMMA ,
MINU -
INTCON 2
RPARENT )
RPARENT )
COMMA ,
IDENFR abs
LPARENT (
MINU -
INTCON 1
RPARENT )
COMMA ,
IDENFR abs
LPARENT (
MINU -
INTCON 3
RPARENT )
COMMA ,
IDENFR abs
LPARENT (
INTCON 22
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
IDENFR theSum
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 10
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
DOTK do
LBRACE {
IDENFR theSum
ASSIGN =
IDENFR theSum
PLUS +
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR f
EQL ==
CHARCON +
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR a
PLUS +
INTCON 3
RPARENT )
LBRACE {
IDENFR theSum
ASSIGN =
IDENFR theSum
PLUS +
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 3
SEMICN ;
RBRACE }
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR a
PLUS +
INTCON 3
RPARENT )
LBRACE {
IDENFR theSum
ASSIGN =
IDENFR theSum
MINU -
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 3
SEMICN ;
RBRACE }
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
IDENFR theSum
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
